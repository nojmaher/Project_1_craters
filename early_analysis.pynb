{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO+Xvz6f09HIvr8Dnj//iD6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nojmaher/Project_1_craters/blob/Nolan/early_analysis.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "0zBIdLXGFq28"
      },
      "outputs": [],
      "source": [
        "import pymc\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from astropy.io import fits\n",
        "from astropy.io import ascii\n",
        "from scipy.stats import norm\n",
        "import scipy.stats as stats\n",
        "import random\n",
        "from scipy.stats import binom\n",
        "from scipy.stats import beta\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import seaborn as sns\n",
        "import pylab"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read in data\n",
        "#effective temp and radius value\n",
        "#radius pf white dwarf is proportional to mass^-1/3\n",
        "#white dwarf is radius value is less than or equal to 1.4\n",
        "# Using google colab which is why I have the url link, update link for every use\n",
        "# if using terminal or workstation, just set url to be the pathway in quotation marks so it is a string\n",
        "url = 'https://raw.githubusercontent.com/nojmaher/Bayes-Proj-2/nolan/1699914521789O-result.csv?token=GHSAT0AAAAAACKDGC7QKAFGEPST2GYPCZ2CZKSUXVQ'\n",
        "data = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "UC5IlUe4F2Ml"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "6Izo7X1h2CmY",
        "outputId": "4e69947b-7847-4ad6-cc82-4614b03dd30d"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                source_id          ra  ra_error        dec  dec_error  \\\n",
              "0     3239578520091272320   73.749585  0.074523   4.791124   0.051274   \n",
              "1     3239481659989440896   75.123857  0.040570   5.098834   0.030158   \n",
              "2     6725834608513954304  273.368629  0.077250 -39.712178   0.074646   \n",
              "3     6350177973988575232  350.633794  0.047815 -83.220631   0.040972   \n",
              "4     2219246577223087232  327.905156  0.058846  65.752615   0.064038   \n",
              "...                   ...         ...       ...        ...        ...   \n",
              "1995  4767595019195868288   86.825196  0.031071 -54.841055   0.035222   \n",
              "1996  4767700739814996736   88.750825  0.023807 -55.231417   0.022656   \n",
              "1997  5457823682735622656  162.885169  0.031358 -26.897538   0.034200   \n",
              "1998  5801993667159429248  257.568114  0.024928 -75.376447   0.028727   \n",
              "1999  6417445683061236608  291.829326  0.034897 -70.800985   0.055871   \n",
              "\n",
              "       parallax  parallax_error  parallax_over_error  astrometric_n_obs_al  \\\n",
              "0     14.601885        0.103691            140.82132                   336   \n",
              "1     14.923890        0.053591            278.47820                   359   \n",
              "2     11.150533        0.094941            117.44645                   149   \n",
              "3     11.428461        0.051217            223.13892                   231   \n",
              "4     11.920418        0.072510            164.39728                   218   \n",
              "...         ...             ...                  ...                   ...   \n",
              "1995  11.339600        0.035058            323.45624                   183   \n",
              "1996  11.205549        0.023454            477.76703                   211   \n",
              "1997  12.825015        0.051673            248.19664                   450   \n",
              "1998  12.110565        0.034246            353.63577                   242   \n",
              "1999  11.188499        0.068267            163.89282                   270   \n",
              "\n",
              "      astrometric_n_obs_ac  ...  phot_bp_mean_flux  phot_rp_mean_flux  \\\n",
              "0                        0  ...       2.606795e+03       1.682654e+03   \n",
              "1                      359  ...       4.709703e+06       5.479858e+06   \n",
              "2                      149  ...       1.016881e+07       1.080480e+07   \n",
              "3                        0  ...       3.532418e+03       2.075799e+03   \n",
              "4                      218  ...       2.440258e+07       2.036126e+07   \n",
              "...                    ...  ...                ...                ...   \n",
              "1995                   183  ...       4.022664e+06       4.322571e+06   \n",
              "1996                   211  ...       3.778307e+06       4.081622e+06   \n",
              "1997                   450  ...       4.829993e+06       5.143652e+06   \n",
              "1998                   242  ...       1.227383e+07       1.186256e+07   \n",
              "1999                     9  ...       7.110868e+03       3.459010e+03   \n",
              "\n",
              "         bp_rp  radial_velocity  radial_velocity_error  phot_variable_flag  \\\n",
              "0     0.114187              NaN                    NaN       NOT_AVAILABLE   \n",
              "1     0.753908              NaN                    NaN       NOT_AVAILABLE   \n",
              "2     0.655335       -27.679622               0.166776       NOT_AVAILABLE   \n",
              "3     0.012253              NaN                    NaN       NOT_AVAILABLE   \n",
              "4     0.392890              NaN                    NaN       NOT_AVAILABLE   \n",
              "...        ...              ...                    ...                 ...   \n",
              "1995  0.667540        22.510980               0.431886       NOT_AVAILABLE   \n",
              "1996  0.673306        -0.383016               0.253863       NOT_AVAILABLE   \n",
              "1997  0.657782       -16.549976               0.214019       NOT_AVAILABLE   \n",
              "1998  0.552464       -11.748927               0.355598       NOT_AVAILABLE   \n",
              "1999 -0.192959              NaN                    NaN       NOT_AVAILABLE   \n",
              "\n",
              "       teff_val a_g_val  radius_val   lum_val  \n",
              "0     9638.5000     NaN         NaN       NaN  \n",
              "1     6021.8574  0.0385    1.118259  1.481500  \n",
              "2     6251.1000  1.2923    2.011212  5.564628  \n",
              "3     8573.3330     NaN         NaN       NaN  \n",
              "4     6876.0000     NaN    2.072316  8.648688  \n",
              "...         ...     ...         ...       ...  \n",
              "1995  6201.5000  0.1410    1.264699  2.131357  \n",
              "1996  6284.2500  0.1580    1.210177  2.057816  \n",
              "1997  6214.0000  0.1185    1.218231  1.993605  \n",
              "1998  6778.3000  0.9360    1.682583  5.384321  \n",
              "1999  8868.6670     NaN         NaN       NaN  \n",
              "\n",
              "[2000 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6bc8f328-1ca1-4081-945c-9ef1017c6a7a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>source_id</th>\n",
              "      <th>ra</th>\n",
              "      <th>ra_error</th>\n",
              "      <th>dec</th>\n",
              "      <th>dec_error</th>\n",
              "      <th>parallax</th>\n",
              "      <th>parallax_error</th>\n",
              "      <th>parallax_over_error</th>\n",
              "      <th>astrometric_n_obs_al</th>\n",
              "      <th>astrometric_n_obs_ac</th>\n",
              "      <th>...</th>\n",
              "      <th>phot_bp_mean_flux</th>\n",
              "      <th>phot_rp_mean_flux</th>\n",
              "      <th>bp_rp</th>\n",
              "      <th>radial_velocity</th>\n",
              "      <th>radial_velocity_error</th>\n",
              "      <th>phot_variable_flag</th>\n",
              "      <th>teff_val</th>\n",
              "      <th>a_g_val</th>\n",
              "      <th>radius_val</th>\n",
              "      <th>lum_val</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3239578520091272320</td>\n",
              "      <td>73.749585</td>\n",
              "      <td>0.074523</td>\n",
              "      <td>4.791124</td>\n",
              "      <td>0.051274</td>\n",
              "      <td>14.601885</td>\n",
              "      <td>0.103691</td>\n",
              "      <td>140.82132</td>\n",
              "      <td>336</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.606795e+03</td>\n",
              "      <td>1.682654e+03</td>\n",
              "      <td>0.114187</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>9638.5000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3239481659989440896</td>\n",
              "      <td>75.123857</td>\n",
              "      <td>0.040570</td>\n",
              "      <td>5.098834</td>\n",
              "      <td>0.030158</td>\n",
              "      <td>14.923890</td>\n",
              "      <td>0.053591</td>\n",
              "      <td>278.47820</td>\n",
              "      <td>359</td>\n",
              "      <td>359</td>\n",
              "      <td>...</td>\n",
              "      <td>4.709703e+06</td>\n",
              "      <td>5.479858e+06</td>\n",
              "      <td>0.753908</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6021.8574</td>\n",
              "      <td>0.0385</td>\n",
              "      <td>1.118259</td>\n",
              "      <td>1.481500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6725834608513954304</td>\n",
              "      <td>273.368629</td>\n",
              "      <td>0.077250</td>\n",
              "      <td>-39.712178</td>\n",
              "      <td>0.074646</td>\n",
              "      <td>11.150533</td>\n",
              "      <td>0.094941</td>\n",
              "      <td>117.44645</td>\n",
              "      <td>149</td>\n",
              "      <td>149</td>\n",
              "      <td>...</td>\n",
              "      <td>1.016881e+07</td>\n",
              "      <td>1.080480e+07</td>\n",
              "      <td>0.655335</td>\n",
              "      <td>-27.679622</td>\n",
              "      <td>0.166776</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6251.1000</td>\n",
              "      <td>1.2923</td>\n",
              "      <td>2.011212</td>\n",
              "      <td>5.564628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6350177973988575232</td>\n",
              "      <td>350.633794</td>\n",
              "      <td>0.047815</td>\n",
              "      <td>-83.220631</td>\n",
              "      <td>0.040972</td>\n",
              "      <td>11.428461</td>\n",
              "      <td>0.051217</td>\n",
              "      <td>223.13892</td>\n",
              "      <td>231</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.532418e+03</td>\n",
              "      <td>2.075799e+03</td>\n",
              "      <td>0.012253</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>8573.3330</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2219246577223087232</td>\n",
              "      <td>327.905156</td>\n",
              "      <td>0.058846</td>\n",
              "      <td>65.752615</td>\n",
              "      <td>0.064038</td>\n",
              "      <td>11.920418</td>\n",
              "      <td>0.072510</td>\n",
              "      <td>164.39728</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>2.440258e+07</td>\n",
              "      <td>2.036126e+07</td>\n",
              "      <td>0.392890</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6876.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.072316</td>\n",
              "      <td>8.648688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>4767595019195868288</td>\n",
              "      <td>86.825196</td>\n",
              "      <td>0.031071</td>\n",
              "      <td>-54.841055</td>\n",
              "      <td>0.035222</td>\n",
              "      <td>11.339600</td>\n",
              "      <td>0.035058</td>\n",
              "      <td>323.45624</td>\n",
              "      <td>183</td>\n",
              "      <td>183</td>\n",
              "      <td>...</td>\n",
              "      <td>4.022664e+06</td>\n",
              "      <td>4.322571e+06</td>\n",
              "      <td>0.667540</td>\n",
              "      <td>22.510980</td>\n",
              "      <td>0.431886</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6201.5000</td>\n",
              "      <td>0.1410</td>\n",
              "      <td>1.264699</td>\n",
              "      <td>2.131357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>4767700739814996736</td>\n",
              "      <td>88.750825</td>\n",
              "      <td>0.023807</td>\n",
              "      <td>-55.231417</td>\n",
              "      <td>0.022656</td>\n",
              "      <td>11.205549</td>\n",
              "      <td>0.023454</td>\n",
              "      <td>477.76703</td>\n",
              "      <td>211</td>\n",
              "      <td>211</td>\n",
              "      <td>...</td>\n",
              "      <td>3.778307e+06</td>\n",
              "      <td>4.081622e+06</td>\n",
              "      <td>0.673306</td>\n",
              "      <td>-0.383016</td>\n",
              "      <td>0.253863</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6284.2500</td>\n",
              "      <td>0.1580</td>\n",
              "      <td>1.210177</td>\n",
              "      <td>2.057816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>5457823682735622656</td>\n",
              "      <td>162.885169</td>\n",
              "      <td>0.031358</td>\n",
              "      <td>-26.897538</td>\n",
              "      <td>0.034200</td>\n",
              "      <td>12.825015</td>\n",
              "      <td>0.051673</td>\n",
              "      <td>248.19664</td>\n",
              "      <td>450</td>\n",
              "      <td>450</td>\n",
              "      <td>...</td>\n",
              "      <td>4.829993e+06</td>\n",
              "      <td>5.143652e+06</td>\n",
              "      <td>0.657782</td>\n",
              "      <td>-16.549976</td>\n",
              "      <td>0.214019</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6214.0000</td>\n",
              "      <td>0.1185</td>\n",
              "      <td>1.218231</td>\n",
              "      <td>1.993605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>5801993667159429248</td>\n",
              "      <td>257.568114</td>\n",
              "      <td>0.024928</td>\n",
              "      <td>-75.376447</td>\n",
              "      <td>0.028727</td>\n",
              "      <td>12.110565</td>\n",
              "      <td>0.034246</td>\n",
              "      <td>353.63577</td>\n",
              "      <td>242</td>\n",
              "      <td>242</td>\n",
              "      <td>...</td>\n",
              "      <td>1.227383e+07</td>\n",
              "      <td>1.186256e+07</td>\n",
              "      <td>0.552464</td>\n",
              "      <td>-11.748927</td>\n",
              "      <td>0.355598</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>6778.3000</td>\n",
              "      <td>0.9360</td>\n",
              "      <td>1.682583</td>\n",
              "      <td>5.384321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>6417445683061236608</td>\n",
              "      <td>291.829326</td>\n",
              "      <td>0.034897</td>\n",
              "      <td>-70.800985</td>\n",
              "      <td>0.055871</td>\n",
              "      <td>11.188499</td>\n",
              "      <td>0.068267</td>\n",
              "      <td>163.89282</td>\n",
              "      <td>270</td>\n",
              "      <td>9</td>\n",
              "      <td>...</td>\n",
              "      <td>7.110868e+03</td>\n",
              "      <td>3.459010e+03</td>\n",
              "      <td>-0.192959</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NOT_AVAILABLE</td>\n",
              "      <td>8868.6670</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2000 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bc8f328-1ca1-4081-945c-9ef1017c6a7a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6bc8f328-1ca1-4081-945c-9ef1017c6a7a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6bc8f328-1ca1-4081-945c-9ef1017c6a7a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cc48869c-6fcc-463b-9d5d-4ccacf933b89\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc48869c-6fcc-463b-9d5d-4ccacf933b89')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cc48869c-6fcc-463b-9d5d-4ccacf933b89 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_1 = data.dropna()\n",
        "#data[data == '     '] = np.nan\n",
        "#data[data == '       '] = np.nan\n",
        "#data[['HRV', 'e_HRV','sigma','e_sigma','N2/Ha','e_N2/Ha','O3/Hb','e_O3/Hb']] = data[['HRV', 'e_HRV','sigma','e_sigma','N2/Ha','e_N2/Ha','O3/Hb','e_O3/Hb']].astype(float)\n",
        "#data"
      ],
      "metadata": {
        "id": "EIxDTMKjjpgo"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_1.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "B57uzPd8jzTZ",
        "outputId": "61fd90ea-3c92-42a3-be6f-a73f90a50c73"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          source_id          ra    ra_error         dec   dec_error  \\\n",
              "count  8.920000e+02  892.000000  892.000000  892.000000  892.000000   \n",
              "mean   3.676850e+18  187.984177    0.058738   -2.223023    0.053396   \n",
              "std    1.996486e+18  102.792022    0.066209   38.227017    0.060326   \n",
              "min    7.677516e+16    0.113041    0.013241  -87.823510    0.015576   \n",
              "25%    2.069048e+18  105.270852    0.029047  -30.699472    0.028168   \n",
              "50%    3.705359e+18  187.564256    0.042062   -4.854899    0.035670   \n",
              "75%    5.567901e+18  282.186195    0.055309   23.605248    0.050637   \n",
              "max    6.901048e+18  359.598452    0.667936   85.050651    0.636721   \n",
              "\n",
              "         parallax  parallax_error  parallax_over_error  astrometric_n_obs_al  \\\n",
              "count  892.000000      892.000000           892.000000            892.000000   \n",
              "mean    16.908838        0.072855           328.517654            231.149103   \n",
              "std      8.940909        0.078417           192.095005            110.110776   \n",
              "min     11.000281        0.018153            24.127409             75.000000   \n",
              "25%     12.108823        0.038444           208.928548            143.000000   \n",
              "50%     14.123468        0.051895           289.661610            212.000000   \n",
              "75%     18.351139        0.068814           416.936195            281.000000   \n",
              "max    148.519487        0.714276          1906.730600            703.000000   \n",
              "\n",
              "       astrometric_n_obs_ac  ...  phot_g_mean_mag  phot_bp_mean_flux  \\\n",
              "count            892.000000  ...       892.000000       8.920000e+02   \n",
              "mean             231.149103  ...         7.615177       1.432023e+07   \n",
              "std              110.110776  ...         0.847887       1.941894e+07   \n",
              "min               75.000000  ...         4.201733       1.309241e+06   \n",
              "25%              143.000000  ...         7.166877       5.562791e+06   \n",
              "50%              212.000000  ...         7.751258       8.515864e+06   \n",
              "75%              281.000000  ...         8.208642       1.478744e+07   \n",
              "max              703.000000  ...         9.717717       2.198315e+08   \n",
              "\n",
              "       phot_rp_mean_flux       bp_rp  radial_velocity  radial_velocity_error  \\\n",
              "count       8.920000e+02  892.000000       892.000000             892.000000   \n",
              "mean        1.499846e+07    0.656600         1.254154               0.618061   \n",
              "std         2.012359e+07    0.062456        23.406825               1.376181   \n",
              "min         1.661099e+06    0.376990       -97.548688               0.121647   \n",
              "25%         6.000975e+06    0.616108       -13.791902               0.187333   \n",
              "50%         9.044654e+06    0.665972         0.106849               0.242874   \n",
              "75%         1.541594e+07    0.703703        14.997638               0.423358   \n",
              "max         2.105187e+08    0.912784       103.996391              19.157095   \n",
              "\n",
              "          teff_val     a_g_val  radius_val     lum_val  \n",
              "count   892.000000  892.000000  892.000000  892.000000  \n",
              "mean   6295.923839    0.311767    1.398481    2.975442  \n",
              "std     223.754828    0.318727    0.272849    1.626719  \n",
              "min    6000.625000    0.009000    0.660522    0.565785  \n",
              "25%    6117.812500    0.084825    1.214002    1.931142  \n",
              "50%    6244.666750    0.173100    1.359801    2.593645  \n",
              "75%    6428.794000    0.427875    1.518156    3.553167  \n",
              "max    7391.264600    1.440000    3.498362   17.040976  \n",
              "\n",
              "[8 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59ccf6bc-a8cd-4f65-ba7d-cbbfc4ec3c80\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>source_id</th>\n",
              "      <th>ra</th>\n",
              "      <th>ra_error</th>\n",
              "      <th>dec</th>\n",
              "      <th>dec_error</th>\n",
              "      <th>parallax</th>\n",
              "      <th>parallax_error</th>\n",
              "      <th>parallax_over_error</th>\n",
              "      <th>astrometric_n_obs_al</th>\n",
              "      <th>astrometric_n_obs_ac</th>\n",
              "      <th>...</th>\n",
              "      <th>phot_g_mean_mag</th>\n",
              "      <th>phot_bp_mean_flux</th>\n",
              "      <th>phot_rp_mean_flux</th>\n",
              "      <th>bp_rp</th>\n",
              "      <th>radial_velocity</th>\n",
              "      <th>radial_velocity_error</th>\n",
              "      <th>teff_val</th>\n",
              "      <th>a_g_val</th>\n",
              "      <th>radius_val</th>\n",
              "      <th>lum_val</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8.920000e+02</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>8.920000e+02</td>\n",
              "      <td>8.920000e+02</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "      <td>892.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.676850e+18</td>\n",
              "      <td>187.984177</td>\n",
              "      <td>0.058738</td>\n",
              "      <td>-2.223023</td>\n",
              "      <td>0.053396</td>\n",
              "      <td>16.908838</td>\n",
              "      <td>0.072855</td>\n",
              "      <td>328.517654</td>\n",
              "      <td>231.149103</td>\n",
              "      <td>231.149103</td>\n",
              "      <td>...</td>\n",
              "      <td>7.615177</td>\n",
              "      <td>1.432023e+07</td>\n",
              "      <td>1.499846e+07</td>\n",
              "      <td>0.656600</td>\n",
              "      <td>1.254154</td>\n",
              "      <td>0.618061</td>\n",
              "      <td>6295.923839</td>\n",
              "      <td>0.311767</td>\n",
              "      <td>1.398481</td>\n",
              "      <td>2.975442</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.996486e+18</td>\n",
              "      <td>102.792022</td>\n",
              "      <td>0.066209</td>\n",
              "      <td>38.227017</td>\n",
              "      <td>0.060326</td>\n",
              "      <td>8.940909</td>\n",
              "      <td>0.078417</td>\n",
              "      <td>192.095005</td>\n",
              "      <td>110.110776</td>\n",
              "      <td>110.110776</td>\n",
              "      <td>...</td>\n",
              "      <td>0.847887</td>\n",
              "      <td>1.941894e+07</td>\n",
              "      <td>2.012359e+07</td>\n",
              "      <td>0.062456</td>\n",
              "      <td>23.406825</td>\n",
              "      <td>1.376181</td>\n",
              "      <td>223.754828</td>\n",
              "      <td>0.318727</td>\n",
              "      <td>0.272849</td>\n",
              "      <td>1.626719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>7.677516e+16</td>\n",
              "      <td>0.113041</td>\n",
              "      <td>0.013241</td>\n",
              "      <td>-87.823510</td>\n",
              "      <td>0.015576</td>\n",
              "      <td>11.000281</td>\n",
              "      <td>0.018153</td>\n",
              "      <td>24.127409</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>4.201733</td>\n",
              "      <td>1.309241e+06</td>\n",
              "      <td>1.661099e+06</td>\n",
              "      <td>0.376990</td>\n",
              "      <td>-97.548688</td>\n",
              "      <td>0.121647</td>\n",
              "      <td>6000.625000</td>\n",
              "      <td>0.009000</td>\n",
              "      <td>0.660522</td>\n",
              "      <td>0.565785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.069048e+18</td>\n",
              "      <td>105.270852</td>\n",
              "      <td>0.029047</td>\n",
              "      <td>-30.699472</td>\n",
              "      <td>0.028168</td>\n",
              "      <td>12.108823</td>\n",
              "      <td>0.038444</td>\n",
              "      <td>208.928548</td>\n",
              "      <td>143.000000</td>\n",
              "      <td>143.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>7.166877</td>\n",
              "      <td>5.562791e+06</td>\n",
              "      <td>6.000975e+06</td>\n",
              "      <td>0.616108</td>\n",
              "      <td>-13.791902</td>\n",
              "      <td>0.187333</td>\n",
              "      <td>6117.812500</td>\n",
              "      <td>0.084825</td>\n",
              "      <td>1.214002</td>\n",
              "      <td>1.931142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.705359e+18</td>\n",
              "      <td>187.564256</td>\n",
              "      <td>0.042062</td>\n",
              "      <td>-4.854899</td>\n",
              "      <td>0.035670</td>\n",
              "      <td>14.123468</td>\n",
              "      <td>0.051895</td>\n",
              "      <td>289.661610</td>\n",
              "      <td>212.000000</td>\n",
              "      <td>212.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>7.751258</td>\n",
              "      <td>8.515864e+06</td>\n",
              "      <td>9.044654e+06</td>\n",
              "      <td>0.665972</td>\n",
              "      <td>0.106849</td>\n",
              "      <td>0.242874</td>\n",
              "      <td>6244.666750</td>\n",
              "      <td>0.173100</td>\n",
              "      <td>1.359801</td>\n",
              "      <td>2.593645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5.567901e+18</td>\n",
              "      <td>282.186195</td>\n",
              "      <td>0.055309</td>\n",
              "      <td>23.605248</td>\n",
              "      <td>0.050637</td>\n",
              "      <td>18.351139</td>\n",
              "      <td>0.068814</td>\n",
              "      <td>416.936195</td>\n",
              "      <td>281.000000</td>\n",
              "      <td>281.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>8.208642</td>\n",
              "      <td>1.478744e+07</td>\n",
              "      <td>1.541594e+07</td>\n",
              "      <td>0.703703</td>\n",
              "      <td>14.997638</td>\n",
              "      <td>0.423358</td>\n",
              "      <td>6428.794000</td>\n",
              "      <td>0.427875</td>\n",
              "      <td>1.518156</td>\n",
              "      <td>3.553167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>6.901048e+18</td>\n",
              "      <td>359.598452</td>\n",
              "      <td>0.667936</td>\n",
              "      <td>85.050651</td>\n",
              "      <td>0.636721</td>\n",
              "      <td>148.519487</td>\n",
              "      <td>0.714276</td>\n",
              "      <td>1906.730600</td>\n",
              "      <td>703.000000</td>\n",
              "      <td>703.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>9.717717</td>\n",
              "      <td>2.198315e+08</td>\n",
              "      <td>2.105187e+08</td>\n",
              "      <td>0.912784</td>\n",
              "      <td>103.996391</td>\n",
              "      <td>19.157095</td>\n",
              "      <td>7391.264600</td>\n",
              "      <td>1.440000</td>\n",
              "      <td>3.498362</td>\n",
              "      <td>17.040976</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59ccf6bc-a8cd-4f65-ba7d-cbbfc4ec3c80')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59ccf6bc-a8cd-4f65-ba7d-cbbfc4ec3c80 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59ccf6bc-a8cd-4f65-ba7d-cbbfc4ec3c80');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30fe7891-d801-45c8-9e83-29a838eeb727\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30fe7891-d801-45c8-9e83-29a838eeb727')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30fe7891-d801-45c8-9e83-29a838eeb727 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#lifting variables, e stands for uncertainty(error)\n",
        "#data names found at: https://vizier.cds.unistra.fr/viz-bin/VizieR?-source=J/ApJS/218/10\n",
        "#number of obs of that galaxy\n",
        "radius = data_1['radius_val']\n",
        "mass = np.power(radius,-3)\n",
        "mass_1 = mass[mass <= 1.4]\n",
        "radial_vel = data_1['radial_velocity']\n",
        "lumens = data_1['lum_val']\n",
        "mass.describe()\n",
        "#N = np.float_(N)\n",
        "#stellar heliocentric velocity\n",
        "#HRV = data['HRV']\n",
        "#e_HRV = data['e_HRV']\n",
        "#log of O3 emission line ratio to HB(Hydrogen Beta which is n=4 to n=2 emission)\n",
        "#O3 = data['O3/Hb']\n",
        "#e_O3 = data['e_O3/Hb']\n",
        "#velocity dispersion of central 3.5\"\n",
        "#s = data['sigma']\n",
        "#e_s = data['e_sigma']\n",
        "#log of N2 emission line line to H_alpha (n=3 to n=2)\n",
        "#N2 = data['N2/Ha']\n",
        "#e_N2 = data['e_N2/Ha']"
      ],
      "metadata": {
        "id": "VnI_kxwXJVPj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20ba7ee5-2ea2-40e9-f559-09f9fcc678b2"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    892.000000\n",
              "mean       0.441548\n",
              "std        0.256923\n",
              "min        0.023356\n",
              "25%        0.285793\n",
              "50%        0.397718\n",
              "75%        0.558911\n",
              "max        3.470069\n",
              "Name: radius_val, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#boxplot of diameter\n",
        "#cannot do with nans in the data\n",
        "#plt.boxplot(HRV[~np.isnan(HRV)])\n",
        "#plt.title(\"TITLE\")\n",
        "#plt.xlabel(\"XLABEL\")\n",
        "#plt.ylabel(\"YLABEL\")\n",
        "#plt.show()\n",
        "\n",
        "#\n",
        "plt.scatter(mass,radius)\n",
        "plt.title(\"TITLE\")\n",
        "plt.xlabel(\"Mass\")\n",
        "plt.ylabel(\"Radius\")\n",
        "plt.show()\n",
        "#Histogram with kde (blue) and normal distribution (red)\n",
        "#ax = sns.histplot(data.Diameter,bins=30,binrange=[4,18.3],kde=True,stat=\"density\")\n",
        "#x_pdf = np.linspace(4, 18.3, 100)\n",
        "#y_pdf = stats.norm.pdf(x_pdf,stats_dict[\"Mean\"],np.sqrt(np.var(data.Diameter)))\n",
        "#ax.plot(x_pdf, y_pdf, 'r', lw=2, label='Normal')\n",
        "#ax.legend()\n",
        "#plt.show(ax)\n"
      ],
      "metadata": {
        "id": "Q9gvyK-2LHx6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "daac08ae-ee4b-4ed3-bb0e-47d20ed617c1"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram with kde (blue) and normal distribution (red)\n",
        "mu = np.mean(mass_1)\n",
        "m_var = np.var(mass_1)\n",
        "nu = mu*(1-mu)/m_var-1\n",
        "alpha = mu*nu\n",
        "beta = (1-mu)*nu\n",
        "ax = sns.histplot(mass_1,bins=30,kde=True,stat=\"density\")\n",
        "x_pdf = np.linspace(0, 5, 1000)\n",
        "y_pdf = stats.beta.pdf(x_pdf,alpha,beta)\n",
        "ax.plot(x_pdf,y_pdf, 'r', lw=4, label='Beta')\n",
        "ax.legend()\n",
        "plt.xlabel('WD Mass')\n",
        "plt.show(ax)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "GDKzNcLpcT-J",
        "outputId": "0bd12946-e9ba-41e9-a883-7e08ff7cfacb"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#boxplot of diameter\n",
        "#cannot do with nans in the data\n",
        "plt.boxplot(mass)\n",
        "plt.title(\"White Dwarf Mass Box Plot\")\n",
        "plt.ylabel(\"\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "PyM4F4x_dVxs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "fabd3c49-d771-4f3f-b0bb-260e315fde65"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#QQ plot\n",
        "#not working\n",
        "stats.probplot(mass_1,dist=stats.beta,sparams=(alpha,beta),plot=plt)\n",
        "#stats.probplot(mass_1,dist)\n",
        "pylab.title(\"QQ Plot for White Dwarf Mass\")\n",
        "pylab.ylabel(\"White Dwarf Mass(Solar Masses)\")\n",
        "pylab.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ER3TtPyW7eaX",
        "outputId": "a1055a70-7d0e-4bd3-9f57-5b12b53b3a4f"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TKiUp3l9GZjN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}